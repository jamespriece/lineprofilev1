const axios = require('axios');
const fs = require('fs');
const crypto = require('crypto');
const express = require('express');
const app = express();
const port = process.env.PORT || 3000;
const config = require('./config.json');

app.get('/', (req, res) => {
  res.send('‚úÖ LINE OA Monitor with Image Comparison is Running');
});

app.get('/check', async (req, res) => {
  console.log(`[HTTP] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å /check`);
  await checkAllAccounts();
  res.send('‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
});

app.get('/test', async (req, res) => {
  for (const account of config.accounts) {
    const msg = `üîî [${account.name}] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß`;
    await sendTelegram(account.telegramBotToken, account.telegramChatId, msg);
  }
  res.send('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
});

app.listen(port, () => {
  console.log(`‚úÖ Web server started on port ${port}`);
});

function loadPreviousProfile(accountName) {
  const filename = `lastProfile_${accountName}.json`;
  if (!fs.existsSync(filename)) return {};
  const raw = fs.readFileSync(filename);
  return JSON.parse(raw);
}

function saveProfile(accountName, profile) {
  const filename = `lastProfile_${accountName}.json`;
  fs.writeFileSync(filename, JSON.stringify(profile, null, 2));
}

async function getLineBotInfo(channelAccessToken) {
  const res = await axios.get('https://api.line.me/v2/bot/info', {
    headers: {
      Authorization: `Bearer ${channelAccessToken}`
    }
  });
  return {
    displayName: res.data.displayName,
    pictureUrl: res.data.pictureUrl || null
  };
}

async function downloadImage(url) {
  const response = await axios.get(url, { responseType: 'arraybuffer' });
  return response.data;
}

function hashBuffer(buffer) {
  return crypto.createHash('sha256').update(buffer).digest('hex');
}

async function sendTelegram(botToken, chatId, message) {
  try {
    await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      chat_id: chatId,
      text: message
    });
  } catch (err) {
    console.error("‚ùå Error sending Telegram message:", err.response?.data || err.message);
  }
}

async function checkAllAccounts() {
  for (const account of config.accounts) {
    try {
      const current = await getLineBotInfo(account.channelAccessToken);
      const previous = loadPreviousProfile(account.name);
      let changes = [];

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠
      if (account.expectedName && current.displayName !== account.expectedName) {
        changes.push(`‚ùå ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á: ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô "${current.displayName}" ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô "${account.expectedName}"`);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö hash
      if (account.expectedPictureUrl && current.pictureUrl) {
        try {
          const currentImg = await downloadImage(current.pictureUrl);
          const expectedImg = await downloadImage(account.expectedPictureUrl);

          const currentHash = hashBuffer(currentImg);
          const expectedHash = hashBuffer(expectedImg);

          if (currentHash !== expectedHash) {
            changes.push(`‚ùå ‡∏£‡∏π‡∏õ LINE OA ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î`);
          } else {
            changes.push(`‚úÖ ‡∏£‡∏π‡∏õ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (hash: ${currentHash.slice(0, 10)}...)`);
          }
        } catch (err) {
          changes.push(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ: ${err.message}`);
        }
      } else {
        changes.push(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö URL ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å LINE OA`);
      }

      if (current.displayName !== previous.displayName || current.pictureUrl !== previous.pictureUrl) {
        saveProfile(account.name, current);
      }

      const msg = `üì¢ [${account.name}]
${changes.join('\n')}`;
      await sendTelegram(account.telegramBotToken, account.telegramChatId, msg);
      console.log(`‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß: ${account.name}`);
    } catch (err) {
      console.error(`‚ùå [${account.name}] ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:`, err.response?.data || err.message);
    }
  }
}
